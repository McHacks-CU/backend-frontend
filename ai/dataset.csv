"String query = ""SELECT account_balance FROM user_data WHERE user_name = ""
             + request.getParameter(""customerName"");
try {
    Statement statement = connection.createStatement( ... );
    ResultSet results = statement.executeQuery( query );
}",unsafe
"string userName = ctx.getAuthenticatedUserName();
string query = ""SELECT * FROM items WHERE owner = ""'""
                + userName + ""' AND itemname = '""
                + ItemName.Text + ""'"";",unsafe
"$username = $_POST['username'];
$password = $_POST['password'];
$sql = ""SELECT * FROM users WHERE username = '$username' AND password = '$password'"";
$result = mysqli_query($conn, $sql);",unsafe
"Query HQLQuery = session.createQuery(""from Inventory where productID='""+userSuppliedParameter+""'""); ",unsafe
"String query = ""SELECT user_id FROM user_data WHERE user_name = '""
              + req.getParameter(""userID"")
              + ""' and user_password = '"" + req.getParameter(""pwd"") +""'"";
try {
    Statement statement = connection.createStatement( … );
    ResultSet results = statement.executeQuery( query );
}",unsafe
"sql = ""SELECT id FROM users WHERE username='"" + user + ""' AND password='"" + pass + ""'""",unsafe
"String custname = request.getParameter(""customerName"");
String query = ""SELECT account_balance FROM user_data WHERE user_name = ? "";
PreparedStatement pstmt = connection.prepareStatement( query );
pstmt.setString( 1, custname);
ResultSet results = pstmt.executeQuery( );",safe
"String query = ""SELECT account_balance FROM user_data WHERE user_name = ?"";
try {
  OleDbCommand command = new OleDbCommand(query, connection);
  command.Parameters.Add(new OleDbParameter(""customerName"", CustomerName Name.Text));
  OleDbDataReader reader = command.ExecuteReader();
  // …
} catch (OleDbException se) {
  // error handling
}",safe
"Query HQLQuery = session.createQuery(""from Inventory where productID=:productid""); 
HQLQuery.setParameter(""productid"", userSuppliedParameter);",safe
"String custname = request.getParameter(""customerName"");
try {
  CallableStatement cs = connection.prepareCall(""{call sp_getAccountBalance(?)}"");
  cs.setString(1, custname);
  ResultSet results = cs.executeQuery();
  // … result set handling
} catch (SQLException se) {
  // … logging and error handling
}",safe
"Try
   Dim command As SqlCommand = new SqlCommand(""sp_getAccountBalance"", connection)
   command.CommandType = CommandType.StoredProcedure
   command.Parameters.Add(new SqlParameter(""@CustomerName"", CustomerName.Text))
   Dim reader As SqlDataReader = command.ExecuteReader()
   '...
 Catch se As SqlException
   'error handling
 End Try",safe
"Codec ORACLE_CODEC = new OracleCodec();
String query = ""SELECT user_id FROM user_data WHERE user_name = '""
+ ESAPI.encoder().encodeForSQL( ORACLE_CODEC, req.getParameter(""userID""))
+ ""' and user_password = '""
+ ESAPI.encoder().encodeForSQL( ORACLE_CODEC, req.getParameter(""pwd"")) +""'"";",safe
"query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'""
",unsafe
"import mysql.connector

db = mysql.connector.connect(
    host=""example.com"",
    user=""username"",
    password=""password"",
    database=""database""
)

cursor = db.cursor()

sql = ""INSERT INTO employees (first_name, last_name) VALUES (%s, %s)""
val = (""John"", ""Doe"")

cursor.execute(sql, val)

db.commit()

cursor.close()
db.close()",safe
"import mysql.connector

db = mysql.connector.connect(
    host=""example.com"",
    user=""username"",
    password=""password"",
    database=""database""
)

cursor = db.cursor()

first_name = ""John""
last_name = ""Doe""
sql = ""INSERT INTO employees (first_name, last_name) VALUES ('"" + first_name + ""', '"" + last_name + ""')""

cursor.execute(sql)

db.commit()

cursor.close()
db.close()
",unsafe
"const { Pool } = require('pg')

const pool = new Pool({
  user: 'username',
  host: 'host',
  database: 'database',
  password: 'password',
  port: 5432,
})

const query = 'SELECT * FROM users WHERE username = $1 AND password = $2'

const values = ['user', 'password']

pool.query(query, values, (error, result) => {
  if (error) {
    console.log(error)
  } else {
    console.log(result.rows)
  }
})
",safe
"const sql = require('mssql')

const config = {
    user: 'username',
    password: 'password',
    server: 'host',
    database: 'database'
}

const username = ""user""
const password = ""password""

const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`

sql.connect(
",unsafe
"const mysql = require('mysql2/promise');

async function getUser(username, password) {
    try {
        const connection = await mysql.createConnection({
            host: 'host',
            user: 'username',
            password: 'password',
            database: 'database'
        });

        const [rows, fields] = await connection.execute('SELECT * FROM users WHERE username = ? AND password = ?', [username, password]);

        connection.end();

        return rows;
    } catch (e) {
        console.log(e);
    }
}
",safe
"const mysql = require('mysql2');

function getUser(username, password) {
    const connection = mysql.createConnection({
        host: 'host',
        user: 'username',
        password: 'password',
        database: 'database'
    });

    const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;

    connection.query(query, function (error, results) {
        if (error) throw error;
        return results;
    });

    connection.end();
}
",unsafe
"// Import the necessary modules
const mysql = require('mysql');

// Create a connection pool
const pool = mysql.createPool({
  host: 'host',
  user: 'username',
  password: 'password',
  database: 'database'
});

// Define the user input
const username = 'user';
const password = 'password';

// Use a template literal to insert the user input into the query
const query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;

// Execute the query using a prepared statement
pool.query(query, (error, results) => {
  if (error) throw error;

  console.log(results);
});
",safe
"const mysql = require('mysql');

var con = mysql.createConnection({
  host: ""host"",
  user: ""username"",
  password: ""password"",
  database: ""database""
});

var user = req.query.username;
var pass = req.query.password;

var sql = ""SELECT * FROM users WHERE username = '"" + user + ""' AND password = '"" + pass + ""'"";

con.query(sql, function (err, result) {
  if (err) throw err;
  console.log(result);
});",unsafe
"<?php
$conn = new PDO(""mysql:host=host;dbname=database"", ""username"", ""password"");
$stmt = $conn->prepare(""SELECT * FROM users WHERE username = :username AND password = :password"");
$stmt->bindParam(':username', $username);
$stmt->bindParam(':password', $password);
$username = $_POST['username'];
$password = $_POST['password'];
$stmt->execute();
$results = $stmt->fetchAll();
",safe
"<?php
$conn = new mysqli(""host"", ""username"", ""password"", ""database"");
$username = $_POST['username'];
$password = $_POST['password'];
$sql = ""SELECT * FROM users WHERE username = '$username' AND password = '$password'"";
$result = $conn->query($sql);
",unsafe
"<?php

$conn = new PDO(""mysql:host=host;dbname=database"", ""username"", ""password"");

$query = ""SELECT * FROM users WHERE username = :username AND password = :password"";
$stmt = $conn->prepare($query);

$stmt->bindParam(':username', $username);
$stmt->bindParam(':password', $password);

$username = ""user"";
$password = ""password"";

$stmt->execute();
$result = $stmt->fetchAll();

$conn = null;

?>
",safe
"<?php

$conn = new mysqli(""host"", ""username"", ""password"", ""database"");

$username = $_POST['username'];
$password = $_POST['password'];

$query = ""SELECT * FROM users WHERE username = '$username' AND password = '$password'"";

$result = $conn->query($query);

$conn->close();

?>
",unsafe
"#include <stdio.h>
#include <stdlib.h>
#include <mysql/mysql.h>

int main(int argc, char *argv[]) {
    MYSQL *conn;
    MYSQL_STMT *stmt;
    MYSQL_BIND param[2];
    char username[20];
    char password[20];
    char query[] = ""SELECT * FROM users WHERE username = ? AND password = ?"";

    conn = mysql_init(NULL);

    mysql_real_connect(conn, ""host"", ""username"", ""password"", ""database"", 0, NULL, 0);

    stmt = mysql_stmt_init(conn);
    mysql_stmt_prepare(stmt, query, strlen(query));

    memset(param, 0, sizeof(param));
    param[0].buffer_type = MYSQL_TYPE_STRING;
    param[0].buffer = username;
    param[0].buffer_length = sizeof(username);
    param[1].buffer_type = MYSQL_TYPE_STRING;
    param[1].buffer = password;
    param[1].buffer_length = sizeof(password);
    mysql_stmt_bind_param(stmt, param);

    strcpy(username, ""user"");
    strcpy(password, ""password"");

    mysql_stmt_execute(stmt);

    mysql_stmt_close(stmt);
    mysql_close(conn);

    return 0;
}
",safe
"#include <stdio.h>
#include <stdlib.h>
#include <mysql/mysql.h>

int main(int argc, char *argv[]) {
    MYSQL *conn;
    char query[255];
    char username[20];
    char password[20];

    printf(""Enter username: "");
    scanf(""%s"", username);
    printf(""Enter password: "");
    scanf(""%s"", password);

    sprintf(query, ""SELECT * FROM users WHERE username = '%s' AND password = '%s'"", username, password);

    conn = mysql_init(NULL);

    mysql_real_connect(conn, ""host"", ""username"", ""password"", ""database"", 0, NULL, 0);

    mysql_query(conn, query);

    mysql_close(conn);

    return 0;
}
",unsafe
"#include <stdio.h>
#include <stdlib.h>
#include <mysql/mysql.h>

int main(int argc, char *argv[]) {
   MYSQL *conn;
   MYSQL_STMT *stmt;
   MYSQL_BIND param[2];
   int status;
   char username[20], password[20];

   conn = mysql_init(NULL);
   mysql_real_connect(conn, ""host"", ""username"", ""password"", ""database"", 0, NULL, 0);

   stmt = mysql_stmt_init(conn);
   mysql_stmt_prepare(stmt, ""SELECT * FROM users WHERE username = ? AND password = ?"", strlen(""SELECT * FROM users WHERE username = ? AND password = ?""));

   memset(param, 0, sizeof(param));
   param[0].buffer_type = MYSQL_TYPE_STRING;
   param[0].buffer = (char *)username;
   param[0].buffer_length = sizeof(username);
   param[1].buffer_type = MYSQL_TYPE_STRING;
   param[1].buffer = (char *)password;
   param[1].buffer_length = sizeof(password);
   mysql_stmt_bind_param(stmt, param);

   strcpy(username, ""user"");
   strcpy(password, ""password"");

   mysql_stmt_execute(stmt);
   MYSQL_RES* result = mysql_store_result(conn);
   mysql_stmt_close(stmt);
   mysql_close(conn);
   return 0;
}
",safe
"#include <stdio.h>
#include <stdlib.h>
#include <mysql/mysql.h>

int main(int argc, char *argv[]) {
   MYSQL *conn;
   char *query;
   char username[20], password[20];

   conn = mysql_init(NULL);
   mysql_real_connect(conn, ""host"", ""username"", ""password"", ""database"", 0, NULL, 0);

   strcpy(username, argv[1]);
   strcpy(password, argv[2]);

   asprintf(&query, ""SELECT * FROM users WHERE username = '%s' AND password = '%s'"", username, password);

   mysql_query(conn, query);
   MYSQL_RES* result = mysql_store_result(conn);

   mysql_free_result(result);
   mysql_close(conn);
   return 0;
}
",unsafe
"import mysql.connector

user_input = input(""Enter a user ID: "")

db = mysql.connector.connect(
    host=""localhost"",
    user=""root"",
    password=""password"",
    database=""mydatabase""
)

cursor = db.cursor()

query = ""SELECT * FROM users WHERE id = %s""
cursor.execute(query, (user_input,))

result = cursor.fetchall()

print(result)
",safe
"$username = $_POST['username'];
$password = $_POST['password'];

$query = ""SELECT * FROM users WHERE username = '$username' AND password = '$password'"";
$result = mysqli_query($connection, $query);
",unsafe
"$username = mysqli_real_escape_string($connection, $_POST['username']);
$password = mysqli_real_escape_string($connection, $_POST['password']);

$query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
$stmt = mysqli_prepare($connection, $query);
mysqli_stmt_bind_param($stmt, ""ss"", $username, $password);
mysqli_stmt_execute($stmt);
$result = mysqli_stmt_get_result($stmt);
",safe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;

let query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
fetch(query)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",unsafe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;

let query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
fetch(query, {
  method: ""POST"",
  body: JSON.stringify({username: username, password: password}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",safe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;
let query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
fetch(`/api/user?query=${query}`)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",unsafe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;

fetch('/api/user', {
  method: 'POST',
  body: JSON.stringify({username: username, password: password}),
  headers: {
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",safe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;

let query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
fetch(query)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",unsafe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;

let query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
let params = [username, password];

fetch('/api/users', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",safe
"let userId = document.getElementById(""userId"").value;
let query = ""DELETE FROM users WHERE id = "" + userId;

fetch(query)
  .then(response => console.log(response))
  .catch(error => console.log(error));
",unsafe
"let userId = document.getElementById(""userId"").value;
let query = ""DELETE FROM users WHERE id = ?"";
let params = [userId];

fetch('/api/users', {
  method: ""DELETE"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => console.log(response))
  .catch(error => console.log(error));
",safe
"let searchTerm = document.getElementById(""searchTerm"").value;
let query = ""SELECT * FROM products WHERE name LIKE '%"" + searchTerm + ""%'"";

fetch(query)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",unsafe
"let searchTerm = document.getElementById(""searchTerm"").value;
let query = ""SELECT * FROM products WHERE name LIKE ?"";
let params = [""%"" + searchTerm + ""%""];

fetch('/api/products', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error));
",safe
"let searchTerm = document.getElementById(""search-term"").value;
let query = ""SELECT * FROM products WHERE name LIKE '%"" + searchTerm + ""%'"";

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let searchTerm = document.getElementById(""search-term"").value;
let query = ""SELECT * FROM products WHERE name LIKE ?"";
let params = [""%"" + searchTerm + ""%""];

fetch('/api/search', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"let id = document.getElementById(""user-id"").value;
let query = ""DELETE FROM users WHERE id = "" + id;

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let id = document.getElementById(""user-id"").value;
let query = ""DELETE FROM users WHERE id = ?"";
let params = [id];

fetch('/api/delete-user', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"let email = document.getElementById(""email"").value;
let query = ""SELECT * FROM users WHERE email = '"" + email + ""'"";

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let email = document.getElementById(""email"").value;
let query = ""SELECT * FROM users WHERE email = ?"";
let params = [email];

fetch('/api/search-user', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;
let query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let username = document.getElementById(""username"").value;
let password = document.getElementById(""password"").value;
let query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
let params = [username, password];

fetch('/api/login', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"let userId = document.getElementById(""userId"").value;
let query = ""DELETE FROM users WHERE id = "" + userId;

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let userId = document.getElementById(""userId"").value;
let query = ""DELETE FROM users WHERE id = ?"";
let params = [userId];

fetch('/api/deleteUser', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));",safe
"let email = document.getElementById(""email"").value;
let query = ""SELECT * FROM users WHERE email = '"" + email + ""'"";

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let email = document.getElementById(""email"").value;
let query = ""SELECT * FROM users WHERE email = ?"";
let params = [email];

fetch('/api/getUser', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));",safe
"let username = document.getElementById(""username"").value;
let query = ""SELECT * FROM users WHERE username = '"" + username + ""'"";

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let username = document.getElementById(""username"").value;
let query = ""SELECT * FROM users WHERE username = ?"";
let params = [username];

fetch('/api/getUser', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"let userId = document.getElementById(""userId"").value;
let query = ""DELETE FROM users WHERE id = "" + userId;

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",unsafe
"let userId = document.getElementById(""userId"").value;
let query = ""DELETE FROM users WHERE id = ?"";
let params = [userId];

fetch('/api/deleteUser', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"let email = document.getElementById(""email"").value;
let password = document.getElementById(""password"").value;
let query = ""SELECT * FROM users WHERE email = '"" + email + ""' AND password = '"" + password + ""'"";

fetch(query)
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));",unsafe
"let email = document.getElementById(""email"").value;
let password = document.getElementById(""password"").value;
let query = ""SELECT * FROM users WHERE email = ? AND password = ?"";
let params = [email, password];

fetch('/api/login', {
  method: ""POST"",
  body: JSON.stringify({query, params}),
  headers: {
    ""Content-Type"": ""application/json""
  }
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  })
  .catch(error => console.log(error));
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/lib/pq""
)

func main() {
    db, err := sql.Open(""postgres"", ""user=postgres password=postgres dbname=postgres sslmode=disable"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    email := ""test@example.com""
    password := ""password""
    query := fmt.Sprintf(""SELECT * FROM users WHERE email = '%s' AND password = '%s'"", email, password)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var id int
        var email, password string
        if err := rows.Scan(&id, &email, &password); err != nil {
            panic(err)
        }
        fmt.Println(id, email, password)
    }
}
",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/lib/pq""
)

func main() {
    db, err := sql.Open(""postgres"", ""user=postgres password=postgres dbname=postgres sslmode=disable"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    email := ""test@example.com""
    password := ""password""
    query := ""SELECT * FROM users WHERE email = $1 AND password = $2""

    rows, err := db.Query(query, email, password)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var id int
        var email, password string
        if err := rows.Scan(&id, &email, &password); err != nil {
            panic(err)
        }
        fmt.Println(id, email, password)
    }
}",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""5""
    query := fmt.Sprintf(""DELETE FROM users WHERE id = '%s'"", id)

    _, err = db.Exec(query)
    if err != nil {
        panic(err)
    }
}",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := 5
    query := ""DELETE FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    _, err = stmt.Exec(id)
    if err != nil {
        panic(err)
    }
}
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    username := ""admin'""
    password := ""password""
    query := fmt.Sprintf(""SELECT id FROM users WHERE username = '%s' AND password = '%s'"", username, password)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var id int
        err := rows.Scan(&id)
        if err != nil {
            panic(err)
        }
        fmt.Println(id)
    }
}",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    username := ""admin""
    password := ""password""
    query := ""SELECT id FROM users WHERE username = ? AND password = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(username, password)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var id int
        err := rows.Scan(&id)
        if err != nil {
            panic(err)
        }
        fmt.Println(id)
    }
}
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""10""
    query := fmt.Sprintf(""SELECT * FROM users WHERE id = %s"", id)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""10""
    query := ""SELECT * FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(id)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    name := ""John Doe""
    query := fmt.Sprintf(""SELECT * FROM users WHERE name = '%s'"", name)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    name := ""John Doe""
    query := ""SELECT * FROM users WHERE name = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(name)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""1""
    query := fmt.Sprintf(""SELECT * FROM users WHERE id = %s"", id)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := 1
    query := ""SELECT * FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(id)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",safe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    email := ""user@example.com""
    query := fmt.Sprintf(""SELECT * FROM users WHERE email = '%s'"", email)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    email := ""user@example.com""
    query := ""SELECT * FROM users WHERE email = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(email)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""1 OR 1=1""
    query := fmt.Sprintf(""SELECT * FROM users WHERE id = %s"", id)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := 1
    query := ""SELECT * FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(id)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    username := ""' OR 1=1--""
    query := fmt.Sprintf(""SELECT * FROM users WHERE username = '%s'"", username)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := 1
    query := ""SELECT * FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(id)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    username := ""johndoe""
    query := ""SELECT * FROM users WHERE username = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(username)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""1 or 1=1""
    query := fmt.Sprintf(""SELECT * FROM users WHERE id = %s"", id)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := 1
    query := ""SELECT * FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(id)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for
",safe
"package main

import (
    ""database/sql""
    ""fmt""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := ""1 or 1=1""
    query := fmt.Sprintf(""SELECT * FROM users WHERE id = %s"", id)

    rows, err := db.Query(query)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",unsafe
"package main

import (
    ""database/sql""
    _ ""github.com/go-sql-driver/mysql""
)

func main() {
    db, err := sql.Open(""mysql"", ""user:password@tcp(localhost:3306)/dbname"")
    if err != nil {
        panic(err)
    }
    defer db.Close()

    id := 1
    query := ""SELECT * FROM users WHERE id = ?""

    stmt, err := db.Prepare(query)
    if err != nil {
        panic(err)
    }
    defer stmt.Close()

    rows, err := stmt.Query(id)
    if err != nil {
        panic(err)
    }
    defer rows.Close()

    for rows.Next() {
        var user User
        err := rows.Scan(&user.ID, &user.Username, &user.Password)
        if err != nil {
            panic(err)
        }
        fmt.Println(user)
    }
}
",safe
"import mysql.connector

def get_user_info(user_id):
    conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
    cursor = conn.cursor()

    query = ""SELECT * FROM users WHERE id = "" + user_id

    cursor.execute(query)
    result = cursor.fetchall()

    cursor.close()
    conn.close()

    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)
",unsafe
"import mysql.connector

def get_user_info(user_id):
    conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
    cursor = conn.cursor()

    query = ""SELECT * FROM users WHERE id = %s""
    cursor.execute(query, (user_id,))
    result = cursor.fetchall()

    cursor.close()
    conn.close()

    return result

user_info = get_user_info(1)
print(user_info)",safe
"from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine(""postgresql://username:password@hostname/dbname"")
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_user_info(user_id):
    session = SessionLocal()
    query = ""SELECT * FROM users WHERE id = "" + user_id
    result = session.execute(query)
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)",unsafe
"from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine(""postgresql://username:password@hostname/dbname"")
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_user_info(user_id):
    session = SessionLocal()
    query = ""SELECT * FROM users WHERE id = :user_id""
    result = session.execute(query, {""user_id"": user_id})
    return result

user_info = get_user_info(1)
print(user_info)",safe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(dbname=""dbname"", user=""username"", password=""password"", host=""hostname"")
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = "" + user_id
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)",unsafe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(dbname=""dbname"", user=""username"", password=""password"", host=""hostname"")
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = %s""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)
",safe
"import sqlite3

def get_user_info(user_id):
    conn = sqlite3.connect('example.db')
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = "" + user_id
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)
",unsafe
"import sqlite3

def get_user_info(user_id):
    conn = sqlite3.connect('example.db')
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = ?""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)",safe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(dbname=""example"", user=""user"", password=""password"", host=""host"")
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = "" + user_id
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)",unsafe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(dbname=""example"", user=""user"", password=""password"", host=""host"")
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = %s""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)
",safe
"import pymysql

def get_user_info(user_id):
    conn = pymysql.connect(db='example', user='user', password='password', host='host')
    cur = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)
",unsafe
"import pymysql

def get_user_info(user_id):
    conn = pymysql.connect(db='example', user='user', password='password', host='host')
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = %s""
    cur.execute(
",safe
"import sqlite3

def get_user_info(user_id):
    conn = sqlite3.connect(""example.db"")
    cur = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)
",unsafe
"import sqlite3

def get_user_info(user_id):
    conn = sqlite3.connect(""example.db"")
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = ?""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)",safe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(
        host=""localhost"",
        database=""example"",
        user=""user"",
        password=""password""
    )
    cur = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)",unsafe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(
        host=""localhost"",
        database=""example"",
        user=""user"",
        password=""password""
    )
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = %s""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)",safe
"import mysql.connector

def get_user_info(user_id):
    conn = mysql.connector.connect(
        host=""localhost"",
        database=""example"",
        user=""user"",
        password=""password""
    )
    cur = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)",unsafe
"import mysql.connector

def get_user_info(user_id):
    conn = mysql.connector.connect(
        host=""localhost"",
        database=""example"",
        user=""user"",
        password=""password""
    )
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = %s""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)
",safe
"import sqlite3

def get_user_info(user_id):
    conn = sqlite3.connect(""example.db"")
    cur = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)
",unsafe
"import sqlite3

def get_user_info(user_id):
    conn = sqlite3.connect(""example.db"")
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = ?""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)
",safe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(
        host=""localhost"",
        database=""example"",
        user=""postgres"",
        password=""password""
    )
    cur = conn.cursor()
    query = f""SELECT * FROM users WHERE id = {user_id}""
    cur.execute(query)
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(""1 or 1=1"")
print(user_info)",unsafe
"import psycopg2

def get_user_info(user_id):
    conn = psycopg2.connect(
        host=""localhost"",
        database=""example"",
        user=""postgres"",
        password=""password""
    )
    cur = conn.cursor()
    query = ""SELECT * FROM users WHERE id = %s""
    cur.execute(query, (user_id,))
    result = cur.fetchall()
    cur.close()
    conn.close()
    return result

user_info = get_user_info(1)
print(user_info)",safe
"import sqlite3

username = input(""Enter a username: "")
password = input(""Enter a password: "")

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

query = f""SELECT * FROM users WHERE username='{username}' AND password='{password}'""
cursor.execute(query)

results = cursor.fetchall()

if len(results) > 0:
    print(""Login Successful!"")
else:
    print(""Invalid Login!"")",unsafe
"import sqlite3

username = input(""Enter a username: "")
password = input(""Enter a password: "")

conn = sqlite3.connect('database.db')
cursor = conn.cursor()

query = ""SELECT * FROM users WHERE username=? AND password=?""
cursor.execute(query, (username, password))

results = cursor.fetchall()

if len(results) > 0:
    print(""Login Successful!"")
else:
    print(""Invalid Login!"")",safe
"import mysql.connector

username = input(""Enter a username: "")
password = input(""Enter a password: "")

conn = mysql.connector.connect(
  host=""localhost"",
  user=""root"",
  password=""root"",
  database=""mydatabase""
)

cursor = conn.cursor()
query = f""SELECT * FROM users WHERE username='{username}' AND password='{password}'""
cursor.execute(query)

results = cursor.fetchall()

if cursor.rowcount > 0:
    print(""Login Successful!"")
else:
    print(""Invalid Login!"")
",unsafe
"import mysql.connector

username = input(""Enter a username: "")
password = input(""Enter a password: "")

conn = mysql.connector.connect(
  host=""localhost"",
  user=""root"",
  password=""root"",
  database=""mydatabase""
)

cursor = conn.cursor()
query = ""SELECT * FROM users WHERE username=%s AND password=%s""
cursor.execute(query, (username, password))

results = cursor.fetchall()

if cursor.rowcount > 0:
    print(""Login Successful!"")
else:
    print(""Invalid Login!"")",safe
"import sqlite3

username = input(""Enter a username: "")
password = input(""Enter a password: "")

conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'""
cursor.execute(query)

result = cursor.fetchone()

if result:
    print(""Login Successful!"")
else:
    print(""Invalid Login!"")
",unsafe
"import sqlite3

username = input(""Enter a username: "")
password = input(""Enter a password: "")

conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

query = ""SELECT * FROM users WHERE username = ? AND password = ?""
cursor.execute(query, (username, password))

result = cursor.fetchone()

if result:
    print(""Login Successful!"")
else:
    print(""Invalid Login!"")
",safe
"import MySQLdb

user_input = input(""Enter a username: "")

# Connect to the database
db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""mydb"")

# Create a cursor object
cursor = db.cursor()

# Unsafe SQL query
query = ""SELECT * FROM users WHERE username = '"" + user_input + ""'""
cursor.execute(query)

# Fetch all results
results = cursor.fetchall()

# Close the cursor and connection
cursor.close()
db.close()",unsafe
"import MySQLdb

user_input = input(""Enter a username: "")

# Connect to the database
db = MySQLdb.connect(host=""localhost"", user=""root"", passwd=""password"", db=""mydb"")

# Create a cursor object
cursor = db.cursor()

# Safe SQL query using placeholders
query = ""SELECT * FROM users WHERE username = %s""
cursor.execute(query, (user_input,))

# Fetch all results
results = cursor.fetchall()

# Close the cursor and connection
cursor.close()
db.close()
",safe
"import mysql.connector

username = input(""Enter your username: "")
password = input(""Enter your password: "")

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""root"",
  passwd=""root"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'""
mycursor.execute(sql)

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
",unsafe
"import mysql.connector

username = input(""Enter your username: "")
password = input(""Enter your password: "")

mydb = mysql.connector.connect(
  host=""localhost"",
  user=""root"",
  passwd=""root"",
  database=""mydatabase""
)

mycursor = mydb.cursor()

sql = ""SELECT * FROM users WHERE username = %s AND password = %s""
mycursor.execute(sql, (username, password))

myresult = mycursor.fetchall()

for x in myresult:
  print(x)
",safe
"import mysql.connector

user_input = input(""Enter user id: "")

# Unsafe, vulnerable to SQL injection
query = ""SELECT * FROM users WHERE id = "" + user_input

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query)
results = cursor.fetchall()

print(results)",unsafe
"import mysql.connector

user_input = input(""Enter user id: "")

# Safe, using parameterized queries
query = ""SELECT * FROM users WHERE id = %s""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query, (user_input,))
results = cursor.fetchall()

print(results)",safe
"import mysql.connector

user_input = input(""Enter a search term: "")

# Unsafe, vulnerable to SQL injection
query = ""SELECT * FROM products WHERE name LIKE '%"" + user_input + ""%'""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query)
results = cursor.fetchall()

print(results)
",unsafe
"import mysql.connector

user_input = input(""Enter a search term: "")

# Safe, using parameterized queries
query = ""SELECT * FROM products WHERE name LIKE %s""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query, ('%'+user_input+'%',))
results = cursor.fetchall()

print(results)",safe
"import mysql.connector

user_input = input(""Enter a user ID: "")

# Unsafe, vulnerable to SQL injection
query = ""SELECT * FROM users WHERE id = "" + user_input

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query)
result = cursor.fetchone()

print(result)
",unsafe
"import mysql.connector

user_input = input(""Enter a user ID: "")

# Safe, using parameterized queries
query = ""SELECT * FROM users WHERE id = %s""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query, (user_input,))
result = cursor.fetchone()

print(result)
",safe
"import mysql.connector

user_input = input(""Enter a username: "")

# Unsafe, vulnerable to SQL injection
query = ""SELECT * FROM users WHERE username = '"" + user_input + ""'""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query)
result = cursor.fetchone()

print(result)
",unsafe
"import mysql.connector

user_input = input(""Enter a username: "")

# Safe, using parameterized queries
query = ""SELECT * FROM users WHERE username = %s""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query, (user_input,))
result = cursor.fetchone()

print(result)",safe
"import mysql.connector

user_input = input(""Enter a username: "")

# Unsafe, vulnerable to SQL injection
query = ""SELECT * FROM users WHERE username = '"" + user_input + ""' AND password = '"" + input(""Enter a password: "") + ""'""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query)
result = cursor.fetchone()

print(result)",unsafe
"import mysql.connector

user_input = input(""Enter a username: "")
password_input = input(""Enter a password: "")

# Safe, using parameterized queries
query = ""SELECT * FROM users WHERE username = %s AND password = %s""

conn = mysql.connector.connect(user='username', password='password', host='hostname', database='dbname')
cursor = conn.cursor()
cursor.execute(query, (user_input, password_input))
result = cursor.fetchone()

print(result)
",safe
"import mysql.connector

user_input = input(""Enter user name: "")

# Connect to the database
cnx = mysql.connector.connect(user='root', password='password', host='127.0.0.1', database='testdb')
cursor = cnx.cursor()

# Execute the SQL statement
query = ""SELECT * FROM users WHERE name = '"" + user_input + ""'""
cursor.execute(query)

# Fetch and print the result
for (name, age) in cursor:
    print(name, age)

cursor.close()
cnx.close()",unsafe
"import mysql.connector
from mysql.connector import Error

user_input = input(""Enter user name: "")

# Connect to the database
cnx = mysql.connector.connect(user='root', password='password', host='127.0.0.1', database='testdb')
cursor = cnx.cursor()

# Prepare the SQL statement
query = ""SELECT * FROM users WHERE name = %s""
cursor.execute(query, (user_input,))

# Fetch and print the result
for (name, age) in cursor:
    print(name, age)

cursor.close()
cnx.close()",safe
"use mysql;

fn main() {
    let conn = mysql::Conn::new(""mysql://root:password@localhost/test"").unwrap();
    let id = ""1 OR 1=1""; // user input
    let query = format!(""SELECT * FROM users WHERE id = {}"", id);
    let result = conn.query(query).unwrap();
}
",unsafe
"use mysql;

fn main() {
    let conn = mysql::Conn::new(""mysql://root:password@localhost/test"").unwrap();
    let id = ""1""; // user input
    let query = ""SELECT * FROM users WHERE id = ?"";
    let result = conn.prep_exec(query, (id,)).unwrap();
}
",safe
"let mut stmt = conn.prepare(format!(""SELECT * FROM users WHERE name='{}'"", user_input)).unwrap();
let rows = stmt.query(&[]).unwrap();
",unsafe
"let mut stmt = conn.prepare(""SELECT * FROM users WHERE name=?"").unwrap();
let rows = stmt.query(&[&user_input]).unwrap();",safe
"let query = format!(""SELECT * FROM users WHERE name='{}' and password='{}'"", user_name, user_password);
let rows = conn.query(query.as_str()).unwrap();
",unsafe
"let query = ""SELECT * FROM users WHERE name=? and password=?"";
let rows = conn.query(query, &[&user_name, &user_password]).unwrap();
",safe
"let query = format!(""SELECT * FROM users WHERE name='{}' and password='{}'"", user_name, user_password);
let rows = conn.query(query.as_str()).unwrap();
",unsafe
"let query = ""SELECT * FROM users WHERE name=$1 and password=$2"";
let rows = conn.query(query, &[&user_name, &user_password]).unwrap();
",safe
"use std::io;
use std::collections::HashMap;

fn main() {
    let mut user_input = String::new();
    io::stdin().read_line(&mut user_input).unwrap();
    let user_input = user_input.trim();
    let sql = format!(""SELECT * FROM users WHERE name = '{}'"", user_input);
    let result = query_db(&sql);
    // Do something with result
}

fn query_db(sql: &str) -> HashMap<String, String> {
    // code to execute the sql query here
}
",unsafe
"use std::io;
use std::collections::HashMap;
use std::borrow::Cow;

fn main() {
    let mut user_input = String::new();
    io::stdin().read_line(&mut user_input).unwrap();
    let user_input = user_input.trim();
    let sql = format!(""SELECT * FROM users WHERE name = ?"");
    let result = query_db(&sql, &[Cow::Owned(user_input.to_owned())]);
    // Do something with result
}

fn query_db(sql: &str, params: &[Cow<str>]) -> HashMap<String, String> {
    // code to execute the sql query here
    // with the use of parameterized queries
}
",safe
"let conn = establish_connection();
let query = format!(""SELECT * FROM users WHERE name = '{}'"", input);
let result = conn.query(query);",unsafe
"let conn = establish_connection();
let stmt = conn.prepare(""SELECT * FROM users WHERE name = $1"").unwrap();
let result = stmt.query(&[&input]).unwrap();",safe
"use diesel::prelude::*;
use diesel::sql_query;

fn main() {
    let conn = establish_connection();
    let query = ""SELECT * FROM users WHERE username = '"" + &get_username() + ""'"";
    let results = sql_query(query).load::<User>(&conn).unwrap();
}
",unsafe
"use diesel::prelude::*;
use diesel::sql_query;

fn main() {
    let conn = establish_connection();
    let username = get_username();
    let results = sql_query(""SELECT * FROM users WHERE username = $1"")
        .bind::<diesel::sql_types::Text, _>(username)
        .load::<User>(&conn)
        .unwrap();
}
",safe
"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'"";
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
",unsafe
"String username = request.getParameter(""username"");
String password = request.getParameter(""password"");
PreparedStatement statement = connection.prepareStatement(""SELECT * FROM users WHERE username = ? AND password = ?"");
statement.setString(1, username);
statement.setString(2, password);
ResultSet resultSet = statement.executeQuery();
",safe
"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'"";
Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);
",unsafe
"String query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
PreparedStatement statement = connection.prepareStatement(query);
statement.setString(1, request.getParameter(""username""));
statement.setString(2, request.getParameter(""password""));
ResultSet resultSet = statement.executeQuery();
",safe
"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'"";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);
",unsafe
"String username = request.getParameter(""username"");
String password = request.getParameter(""password"");
PreparedStatement stmt = connection.prepareStatement(""SELECT * FROM users WHERE username = ? AND password = ?"");
stmt.setString(1, username);
stmt.setString(2, password);
ResultSet rs = stmt.executeQuery();
",safe
"String query = ""SELECT * FROM users WHERE name = '"" + userName + ""' AND password = '"" + password + ""'"";
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(query);",unsafe
"String query = ""SELECT * FROM users WHERE name = ? AND password = ?"";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setString(1, userName);
stmt.setString(2, password);
ResultSet rs = stmt.executeQuery();
",safe
"import java.sql.*;

public class UnsafeExample {
    public static void main(String[] args) throws SQLException {
        String username = ""root"";
        String password = ""password"";
        String url = ""jdbc:mysql://localhost:3306/mydatabase"";

        Connection conn = DriverManager.getConnection(url, username, password);
        Statement stmt = conn.createStatement();

        // UNSAFE - user input is directly concatenated into the query
        String userInput = ""1 OR 1=1"";
        String query = ""SELECT * FROM users WHERE id = "" + userInput;
        ResultSet rs = stmt.executeQuery(query);
    }
}",unsafe
"import java.sql.*;

public class SafeExample {
    public static void main(String[] args) throws SQLException {
        String username = ""root"";
        String password = ""password"";
        String url = ""jdbc:mysql://localhost:3306/mydatabase"";

        Connection conn = DriverManager.getConnection(url, username, password);
        PreparedStatement stmt = conn.prepareStatement(""SELECT * FROM users WHERE id = ?"");

        // SAFE - user input is passed as a parameter to the prepared statement
        String userInput = ""1 OR 1=1"";
        stmt.setInt(1, Integer.parseInt(userInput));
        ResultSet rs = stmt.executeQuery();
    }
}",safe
"String query = ""SELECT * FROM users WHERE name='"" + request.getParameter(""name"") + ""'"";
ResultSet result = statement.executeQuery(query);",unsafe
"String name = request.getParameter(""name"");
PreparedStatement statement = connection.prepareStatement(""SELECT * FROM users WHERE name=?"");
statement.setString(1, name);
ResultSet result = statement.executeQuery();",safe
"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'"";
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(query);",unsafe
"String query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setString(1, request.getParameter(""username""));
stmt.setString(2, request.getParameter(""password""));
ResultSet rs = stmt.executeQuery();
",safe
"String query = ""SELECT * FROM users WHERE username = '"" + request.getParameter(""username"") + ""' AND password = '"" + request.getParameter(""password"") + ""'"";
Statement stmt = connection.createStatement();
ResultSet rs = stmt.executeQuery(query);",unsafe
"String query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
PreparedStatement stmt = connection.prepareStatement(query);
stmt.setString(1, request.getParameter(""username""));
stmt.setString(2, request.getParameter(""password""));
ResultSet rs = stmt.executeQuery();",safe
"using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE username = @username AND password = @password"", con))
{
    cmd.Parameters.AddWithValue(""@username"", textBox1.Text);
    cmd.Parameters.AddWithValue(""@password"", textBox2.Text);
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",safe
"string query = ""SELECT * FROM users WHERE username = '"" + textBox1.Text + ""' AND password = '"" + textBox2.Text + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}",unsafe
"using (SqlCommand cmd = new SqlCommand(""INSERT INTO products (name, price) VALUES (@name, @price)"", con))
{
    cmd.Parameters.Add(""@name"", SqlDbType.NVarChar).Value = productName;
    cmd.Parameters.Add(""@price"", SqlDbType.Decimal).Value = productPrice;
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}",safe
"string query = ""INSERT INTO products (name, price) VALUES ('"" + productName + ""', '"" + productPrice + ""')"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}",unsafe
"using (SqlCommand cmd = new SqlCommand(""SELECT * FROM orders WHERE customer_id = @id"", con))
{
    cmd.Parameters.AddWithValue(""@id"", customerId);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(reader[""order_id""] + "" - "" + reader[""order_date""]);
        }
    }
    con.Close();
}
",safe
"string query = ""SELECT * FROM orders WHERE customer_id = "" + customerId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(reader[""order_id""] + "" - "" + reader[""order_date""]);
        }
    }
    con.Close();
}
",unsafe
"string searchTerm = ""John"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM customers WHERE name LIKE @searchTerm"", con))
{
    cmd.Parameters.AddWithValue(""@searchTerm"", ""%"" + searchTerm + ""%"");
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(reader[""name""] + "" - "" + reader[""email""]);
        }
    }
    con.Close();
}
",safe
"string searchTerm = ""John'; DROP TABLE customers; --"";
string query = ""SELECT * FROM customers WHERE name LIKE '%"" + searchTerm + ""%'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(reader[""name""] + "" - "" + reader[""email""]);
        }
    }
    con.Close();
}
",unsafe
"string username = ""johndoe"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE username = @username"", con))
{
    cmd.Parameters.AddWithValue(""@username"", username);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(""Username: "" + reader[""username""]);
            Console.WriteLine(""Email: "" + reader[""email""]);
        }
    }
    con.Close();
}
",safe
"string username = ""' OR 1=1; --"";
string query = ""SELECT * FROM users WHERE username = '"" + username + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(""Username: "" + reader[""username""]);
            Console.WriteLine(""Email: "" + reader[""email""]);
        }
    }
    con.Close();
}",unsafe
"int userId = 5;
using (SqlCommand cmd = new SqlCommand(""DELETE FROM users WHERE id = @userId"", con))
{
    cmd.Parameters.AddWithValue(""@userId"", userId);
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",safe
"string userId = ""5 OR 1=1"";
string query = ""DELETE FROM users WHERE id = "" + userId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}",unsafe
"string searchTerm = ""John"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM employees WHERE name LIKE '%' + @searchTerm + '%'"", con))
{
    cmd.Parameters.AddWithValue(""@searchTerm"", searchTerm);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(""Name: "" + reader[""name""]);
            Console.WriteLine(""Position: "" + reader[""position""]);
            Console.WriteLine(""Salary: "" + reader[""salary""]);
        }
    }
    con.Close();
}",safe
"string searchTerm = ""John' OR 1=1; --"";
string query = ""SELECT * FROM employees WHERE name LIKE '%"" + searchTerm + ""%'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(""Name: "" + reader[""name""]);
            Console.WriteLine(""Position: "" + reader[""position""]);
            Console.WriteLine(""Salary: "" + reader[""salary""]);
        }
    }
    con.Close();
}",unsafe
"string username = ""johndoe"";
string password = ""mypassword"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE username = @username AND password = HASHBYTES('SHA2_512', @password)"", con))
{
    cmd.Parameters.AddWithValue(""@username"", username);
    cmd.Parameters.AddWithValue(""@password"", password);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.Read())
        {
            Console.WriteLine(""Welcome "" + reader[""username""]);
        }
        else
        {
            Console.WriteLine(""Invalid username or password."");
        }
    }
    con.Close();
}
",safe
"string username = ""johndoe' OR 1=1; --"";
string password = ""mypassword"";
string query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.Read())
        {
            Console.WriteLine(""Welcome "" + reader[""username""]);
        }
        else
        {
            Console.WriteLine(""Invalid username or password."");
        }
    }
    con.Close();
}
",unsafe
"int productId = 5;
using (SqlCommand cmd = new SqlCommand(""DELETE FROM products WHERE product_id = @productId"", con))
{
    cmd.Parameters.AddWithValue(""@productId"", productId);
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
    Console.WriteLine(""Product deleted successfully."");
}
",safe
"string productId = ""5 OR 1=1; DELETE FROM products; --"";
string query = ""DELETE FROM products WHERE product_id = "" + productId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
    Console.WriteLine(""Product deleted successfully."");
}",unsafe
"string searchTerm = ""red"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM products WHERE color = @searchTerm"", con))
{
    cmd.Parameters.AddWithValue(""@searchTerm"", searchTerm);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(""Product ID: "" + reader[""product_id""] + "" | Name: "" + reader[""name""]);
        }
    }
    con.Close();
}
",safe
"string searchTerm = ""red' OR 1=1; --"";
string query = ""SELECT * FROM products WHERE color = '"" + searchTerm + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        while (reader.Read())
        {
            Console.WriteLine(""Product ID: "" + reader[""product_id""] + "" | Name: "" + reader[""name""]);
        }
    }
    con.Close();
}",unsafe
"string email = ""user@example.com"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE email = @email"", con))
{
    cmd.Parameters.AddWithValue(""@email"", email);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            Console.WriteLine(""User found!"");
        }
        else
        {
            Console.WriteLine(""User not found."");
        }
    }
    con.Close();
}",safe
"string email = ""user@example.com' OR 1=1; --"";
string query = ""SELECT * FROM users WHERE email = '"" + email + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            Console.WriteLine(""User found!"");
        }
        else
        {
            Console.WriteLine(""User not found."");
        }
    }
    con.Close();
}",unsafe
"string username = ""johndoe"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE username = @username"", con))
{
    cmd.Parameters.AddWithValue(""@username"", username);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            Console.WriteLine(""User found!"");
        }
        else
        {
            Console.WriteLine(""User not found."");
        }
    }
    con.Close();
}
",safe
"string username = ""johndoe' OR 1=1; --"";
string query = ""SELECT * FROM users WHERE username = '"" + username + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            Console.WriteLine(""User found!"");
        }
        else
        {
            Console.WriteLine(""User not found."");
        }
    }
    con.Close();
}
",unsafe
"int userId = 5;
using (SqlCommand cmd = new SqlCommand(""DELETE FROM users WHERE id = @id"", con))
{
    cmd.Parameters.AddWithValue(""@id"", userId);
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",safe
"string userId = ""5 OR 1=1; DELETE FROM users; --"";
string query = ""DELETE FROM users WHERE id = "" + userId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",unsafe
"int productId = 10;
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM products WHERE id = @id"", con))
{
    cmd.Parameters.AddWithValue(""@id"", productId);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Product Name: "" + reader[""name""]);
                Console.WriteLine(""Product Price: "" + reader[""price""]);
            }
        }
        else
        {
            Console.WriteLine(""Product not found."");
        }
    }
    con.Close();
}",safe
"string productId = ""10; DROP TABLE products; --"";
string query = ""SELECT * FROM products WHERE id = "" + productId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Product Name: "" + reader[""name""]);
                Console.WriteLine(""Product Price: "" + reader[""price""]);
            }
        }
        else
        {
            Console.WriteLine(""Product not found."");
        }
    }
    con.Close();
}
",unsafe
"string userName = ""John Smith"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE name = @name"", con))
{
    cmd.Parameters.AddWithValue(""@name"", userName);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""User Name: "" + reader[""name""]);
                Console.WriteLine(""User Email: "" + reader[""email""]);
            }
        }
        else
        {
            Console.WriteLine(""User not found."");
        }
    }
    con.Close();
}
",safe
"string userName = ""John Smith' OR '1'='1"";
string query = ""SELECT * FROM users WHERE name = '"" + userName + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""User Name: "" + reader[""name""]);
                Console.WriteLine(""User Email: "" + reader[""email""]);
            }
        }
        else
        {
            Console.WriteLine(""User not found."");
        }
    }
    con.Close();
}
",unsafe
"string userId = ""123"";
using (SqlCommand cmd = new SqlCommand(""DELETE FROM users WHERE id = @id"", con))
{
    cmd.Parameters.AddWithValue(""@id"", userId);
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",safe
"string userId = ""123 OR 1=1"";
string query = ""DELETE FROM users WHERE id = "" + userId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",unsafe
"string productName = ""Apple"";
int minPrice = 1;
int maxPrice = 10;
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM products WHERE name = @name AND price BETWEEN @minPrice AND @maxPrice"", con))
{
    cmd.Parameters.AddWithValue(""@name"", productName);
    cmd.Parameters.AddWithValue(""@minPrice"", minPrice);
    cmd.Parameters.AddWithValue(""@maxPrice"", maxPrice);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Product Name: "" + reader[""name""]);
                Console.WriteLine(""Product Price: "" + reader[""price""]);
            }
        }
        else
        {
            Console.WriteLine(""No matching products found."");
        }
    }
    con.Close();
}
",safe
"string productName = ""Apple' OR '1'='1"";
string minPrice = ""1"";
string maxPrice = ""10"";
string query = ""SELECT * FROM products WHERE name = '"" + productName + ""' AND price BETWEEN "" + minPrice + "" AND "" + maxPrice;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
   
",unsafe
"string username = ""johndoe"";
string password = ""password123"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM users WHERE username = @username AND password = @password"", con))
{
    cmd.Parameters.AddWithValue(""@username"", username);
    cmd.Parameters.AddWithValue(""@password"", password);
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Username: "" + reader[""username""]);
                Console.WriteLine(""User ID: "" + reader[""id""]);
            }
        }
        else
        {
            Console.WriteLine(""Invalid username or password."");
        }
    }
    con.Close();
}",safe
"string username = ""johndoe' OR '1'='1"";
string password = ""password123"";
string query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Username: "" + reader[""username""]);
                Console.WriteLine(""User ID: "" + reader[""id""]);
            }
        }
        else
        {
            Console.WriteLine(""Invalid username or password."");
        }
    }
    con.Close();
}
",unsafe
"string searchTerm = ""John"";
using (SqlCommand cmd = new SqlCommand(""SELECT * FROM customers WHERE first_name LIKE @searchTerm"", con))
{
    cmd.Parameters.AddWithValue(""@searchTerm"", ""%"" + searchTerm + ""%"");
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Customer ID: "" + reader[""id""]);
                Console.WriteLine(""Name: "" + reader[""first_name""] + "" "" + reader[""last_name""]);
            }
        }
        else
        {
            Console.WriteLine(""No results found."");
        }
    }
    con.Close();
}
",safe
"string searchTerm = ""John'; DROP TABLE customers; --"";
string query = ""SELECT * FROM customers WHERE first_name LIKE '%"" + searchTerm + ""%'"";
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    using (SqlDataReader reader = cmd.ExecuteReader())
    {
        if (reader.HasRows)
        {
            while (reader.Read())
            {
                Console.WriteLine(""Customer ID: "" + reader[""id""]);
                Console.WriteLine(""Name: "" + reader[""first_name""] + "" "" + reader[""last_name""]);
            }
        }
        else
        {
            Console.WriteLine(""No results found."");
        }
    }
    con.Close();
}
",unsafe
"string userId = ""123"";
using (SqlCommand cmd = new SqlCommand(""DELETE FROM users WHERE id = @userId"", con))
{
    cmd.Parameters.AddWithValue(""@userId"", userId);
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}",safe
"string userId = ""123; DROP TABLE users; --"";
string query = ""DELETE FROM users WHERE id = "" + userId;
using (SqlCommand cmd = new SqlCommand(query, con))
{
    con.Open();
    cmd.ExecuteNonQuery();
    con.Close();
}
",unsafe
"require 'pg'

def safe_query(query, params)
    conn = PG.connect(dbname: 'mydb')
    result = conn.exec_params(query, params)
    conn.close
    return result
end

params = ['John', 'Doe']
query = ""SELECT * FROM users WHERE first_name = $1 AND last_name = $2""

safe_query(query, params)
",safe
"require 'pg'

def unsafe_query(query)
    conn = PG.connect(dbname: 'mydb')
    result = conn.exec(query)
    conn.close
    return result
end

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

unsafe_query(query)
",unsafe
"require 'active_record'

class User < ActiveRecord::Base
end

params = {first_name: 'John', last_name: 'Doe'}

User.where(params)",safe
"require 'active_record'

class User < ActiveRecord::Base
end

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

User.find_by_sql(query)",unsafe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@host:port/dbname')

params = {first_name: 'John', last_name: 'Doe'}

DB[:users].where(params).all
",safe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@host:port/dbname')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

DB[query].all",unsafe
"require 'dbi'

dbh = DBI.connect('DBI:Mysql:mydb', 'username', 'password')

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

dbh.prepare(query).execute(*params)
",safe
"require 'dbi'

dbh = DBI.connect('DBI:Mysql:mydb', 'username', 'password')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

dbh.do(query)
",unsafe
"require 'mysql2'

client = Mysql2::Client.new(:host => ""localhost"", :username => ""root"", :password => ""password"", :database => ""mydb"")

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

client.prepare(query).execute(*params)
",safe
"require 'mysql2'

client = Mysql2::Client.new(:host => ""localhost"", :username => ""root"", :password => ""password"", :database => ""mydb"")

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

client.query(query)",unsafe
"require 'activerecord'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'user',
  password: 'password',
  database: 'mydb'
)

params = {first_name: 'John', last_name: 'Doe'}

User.where(params).all
",safe
"require 'activerecord'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'user',
  password: 'password',
  database: 'mydb'
)

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

ActiveRecord::Base.connection.execute(query)
",unsafe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@localhost/mydb')

params = {first_name: 'John', last_name: 'Doe'}

DB[:users].where(params).all",safe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@localhost/mydb')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

DB[query].all",unsafe
"require 'pg'

conn = PG.connect(dbname: 'mydb', user: 'user', password: 'password', host: 'localhost')

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = $1 AND last_name = $2""

conn.exec_params(query, params)
",safe
"require 'pg'

conn = PG.connect(dbname: 'mydb', user: 'user', password: 'password', host: 'localhost')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

conn.exec(query)
",unsafe
"require 'sqlite3'

db = SQLite3::Database.new ""mydb.db""

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

db.execute(query, params)",safe
"require 'sqlite3'

db = SQLite3::Database.new ""mydb.db""

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

db.execute(query)
",unsafe
"require 'activerecord'

class User < ActiveRecord::Base
end

params = {first_name: 'John', last_name: 'Doe'}

User.where(params)
",safe
"require 'activerecord'

class User < ActiveRecord::Base
end

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

User.find_by_sql(query)",unsafe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@host/dbname')

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

DB[query, *params].all
",safe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@host/dbname')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

DB[query].all
",unsafe
"require 'pg'

conn = PG.connect(dbname: 'mydb')

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = $1 AND last_name = $2""

conn.exec_params(query, params)",safe
"require 'pg'

conn = PG.connect(dbname: 'mydb')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

conn.exec(query)",unsafe
"require 'mysql2'

client = Mysql2::Client.new(host: ""localhost"", username: ""root"", password: ""password"", database: ""mydb"")

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

client.prepare(query).execute(*params)",safe
"require 'mysql2'

client = Mysql2::Client.new(host: ""localhost"", username: ""root"", password: ""password"", database: ""mydb"")

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

client.query(query)
",unsafe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

User.find_by_sql([query, *params])
",safe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

User.find_by_sql(query)
",unsafe
"require 'sequel'

DB = Sequel.connect(adapter: 'postgres', host: 'localhost', user: 'myuser', password: 'mypassword', database: 'mydb')

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = ? AND last_name = ?""

DB[query, *params].all
",safe
"require 'sequel'

DB = Sequel.connect(adapter: 'postgres', host: 'localhost', user: 'myuser', password: 'mypassword', database: 'mydb')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

DB[query].all
",unsafe
"require 'pg'

conn = PG.connect(dbname: 'mydb', user: 'myuser', password: 'mypassword')

params = ['John', 'Doe']

query = ""SELECT * FROM users WHERE first_name = $1 AND last_name = $2""

conn.exec_params(query, params)",safe
"require 'pg'

conn = PG.connect(dbname: 'mydb', user: 'myuser', password: 'mypassword')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

conn.exec(query)
",unsafe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

params = { first_name: 'John', last_name: 'Doe' }

User.where(params).to_a
",safe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

User.find_by_sql(query)
",unsafe
"require 'sequel'

DB = Sequel.connect(
  adapter: 'postgres',
  host: 'localhost',
  user: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

params = { first_name: 'John', last_name: 'Doe' }

DB[:users].where(params).all",safe
"require 'sequel'

DB = Sequel.connect(
  adapter: 'postgres',
  host: 'localhost',
  user: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

DB[:users].where(query).all",unsafe
"require 'pg'

conn = PG.connect(
  host: 'localhost',
  user: 'myuser',
  password: 'mypassword',
  dbname: 'mydb'
)

params = { first_name: 'John', last_name: 'Doe' }

conn.exec_params(""SELECT * FROM users WHERE first_name = $1 AND last_name = $2"", [params[:first_name], params[:last_name]])",safe
"require 'pg'

conn = PG.connect(
  host: 'localhost',
  user: 'myuser',
  password: 'mypassword',
  dbname: 'mydb'
)

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}",unsafe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

class User < ActiveRecord::Base
end

params = { first_name: 'John', last_name: 'Doe' }

User.where(params).all",safe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

class User < ActiveRecord::Base
end

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

User.find_by_sql(query)",unsafe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@host/dbname')

params = { first_name: 'John', last_name: 'Doe' }

DB[:users].where(first_name: params[:first_name], last_name: params[:last_name]).all",safe
"require 'sequel'

DB = Sequel.connect('postgres://user:password@host/dbname')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

DB[:users].sql(query)
",unsafe
"require 'pg'

conn = PG.connect(dbname: 'mydb', user: 'myuser', password: 'mypassword')

params = { first_name: 'John', last_name: 'Doe' }

conn.exec_params(""SELECT * FROM users WHERE first_name = $1 AND last_name = $2"", [params[:first_name], params[:last_name]])",safe
"require 'pg'

conn = PG.connect(dbname: 'mydb', user: 'myuser', password: 'mypassword')

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

conn.exec(query)
",unsafe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

class User < ActiveRecord::Base
end

params = { first_name: 'John', last_name: 'Doe' }

User.where(first_name: params[:first_name], last_name: params[:last_name]).all",safe
"require 'active_record'

ActiveRecord::Base.establish_connection(
  adapter: 'postgresql',
  host: 'localhost',
  username: 'myuser',
  password: 'mypassword',
  database: 'mydb'
)

class User < ActiveRecord::Base
end

query = ""SELECT * FROM users WHERE first_name = '#{params[:first_name]}' AND last_name = '#{params[:last_name]}'""

User.find_by_sql(query)",unsafe
"String username = request.getParameter(""username"");
String password = request.getParameter(""password"");

String query = ""SELECT * FROM users WHERE username = ? AND password = ?"";
PreparedStatement preparedStatement = connection.prepareStatement(query);
preparedStatement.setString(1, username);
preparedStatement.setString(2, password);
ResultSet resultSet = preparedStatement.executeQuery();",safe
"String username = request.getParameter(""username"");
String password = request.getParameter(""password"");

String query = ""SELECT * FROM users WHERE username = '"" + username + ""' AND password = '"" + password + ""'"";

Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery(query);",unsafe
"String sql = ""SELECT * FROM users WHERE id = "" + userId;
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(sql);",unsafe
"PreparedStatement ps = conn.prepareStatement(""SELECT * FROM users WHERE id = ?"");
ps.setInt(1, userId);
ResultSet rs = ps.executeQuery();",safe
"Session session = HibernateUtil.getSessionFactory().openSession();
session.beginTransaction();

User user = new User();
user.setUsername(""user"");
user.setPassword(""password"");
session.save(user);

session.getTransaction().commit();
",safe
"String userInput = ""user'; DROP TABLE users;--"";
String query = ""INSERT INTO users (username, password) VALUES ('"" + userInput + ""', 'password')"";

Statement statement = connection.createStatement();
statement.executeUpdate(query);",unsafe
"String query = ""SELECT * FROM users WHERE username = ?"";
PreparedStatement statement = connection.prepareStatement(query);
statement.setString(1, userInput);
ResultSet result = statement.executeQuery();",safe
"String query = ""SELECT * FROM users WHERE username = '"" + userInput + ""'"";
Statement statement = connection.createStatement();
ResultSet result = statement.executeQuery(query);",unsafe
"val query = ""SELECT * FROM users WHERE username = ?""
val statement = connection.prepareStatement(query)
statement.setString(1, userInput)
val result = statement.executeQuery()",safe
"val query = ""SELECT * FROM users WHERE username = '$userInput'""
val statement = connection.createStatement()
val result = statement.executeQuery(query)",unsafe
"val query = ""SELECT * FROM users WHERE username = ?""
val statement = connection.prepareStatement(query)
statement.setString(1, userInput)
val result = statement.executeQuery()",safe
"val query = ""SELECT * FROM users WHERE username = '$userInput'""
val statement = connection.createStatement()
val result = statement.executeQuery(query)",unsafe